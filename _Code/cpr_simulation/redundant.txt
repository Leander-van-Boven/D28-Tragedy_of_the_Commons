        "agent" : {
            "metabolism" : 2,               # The 'cost' of staying alive per epoch (in energy)
            "procreate_req" : 16,           # The amount of energy an agent needs to have before it can create offspring
            "procreate_cost" : 10,          # The amount of energy it costs to create a new child
            "maximum_age" : 100,           # The maximum age for the agent, the agent gets 'removed' when its age exceeds this parameter
        },

        # if self.growth_func == 0:
        #     self.amount += self.amount * self.growth_rate
        # elif self.growth_func == 1:
        #     self.amount += self.amount
        # elif self.growth_func == 2:
        #     self.amount += math.sqrt(self.max_amount - self.amount) 



OLD ARGPARSE W/ SCENARIO PATH INSTEAD OF NAME:
if args.command=='run':
    if args.path:
    try:
        if os.path.isdir(args.path):
            loc = f'{args.path}\\params.json'
            with open(args.path+'\\params.json', 'r') as file:
                param_dict = json.loads(file.read())
        elif os.path.isfile(args.path):
            loc = args.path
            with open(args.path, 'r') as file:
                param_dict = json.loads(file.read())
    except FileNotFoundError:
        print('Parameter file not found: %s' % loc)
        sys.exit(1)
    TODO: Catch more errors if needed
# Load correct scenario if provided
if args.scenario != None:
    with open(args.scenario, 'r') as file:
        param_dict = json.loads(file.read())

elif args.command=='save':
        if args.path and os.path.isdir(args.path):
            path = args.path
        else:
            i=0
            while(os.path.isfile('run'+i+'.py')):
                i+=1
            path = 'run'+i+'.py'

        if nobp.copy_last_run(path):
            print('Saved last run to', path)
        else:
            print('No run to save :(')



MAIN.PY DECIDE WHAT PARAMS TO USE:
        # if not os.path.isfile('.defaults.json'):
        #     generate_default_params()
        # generate_default_params()
        # with open('.defaults.json', 'r') as file:
        #     s = file.read()
        # params = json.loads(s)